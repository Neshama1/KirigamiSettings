// This file is generated by kconfig_compiler_kf5 from kirigamisettingsconfig.kcfg.
// All changes you do to this file will be lost.

#include "kirigamisettingsconfig.h"

#include <qglobal.h>
#include <QFile>

class KirigamiSettingsConfigHelper
{
  public:
    KirigamiSettingsConfigHelper() : q(nullptr) {}
    ~KirigamiSettingsConfigHelper() { delete q; q = nullptr; }
    KirigamiSettingsConfigHelper(const KirigamiSettingsConfigHelper&) = delete;
    KirigamiSettingsConfigHelper& operator=(const KirigamiSettingsConfigHelper&) = delete;
    KirigamiSettingsConfig *q;
};
Q_GLOBAL_STATIC(KirigamiSettingsConfigHelper, s_globalKirigamiSettingsConfig)
KirigamiSettingsConfig *KirigamiSettingsConfig::self()
{
  if (!s_globalKirigamiSettingsConfig()->q) {
    new KirigamiSettingsConfig;
    s_globalKirigamiSettingsConfig()->q->read();
  }

  return s_globalKirigamiSettingsConfig()->q;
}

KirigamiSettingsConfig::KirigamiSettingsConfig( QObject *parent )
  : KConfigSkeleton()
{
  setParent(parent);
  Q_ASSERT(!s_globalKirigamiSettingsConfig()->q);
  s_globalKirigamiSettingsConfig()->q = this;
  KConfigCompilerSignallingItem::NotifyFunction notifyFunction = static_cast<KConfigCompilerSignallingItem::NotifyFunction>(&KirigamiSettingsConfig::itemChanged);

  setCurrentGroup( QStringLiteral( "General" ) );

  KConfigCompilerSignallingItem  *itemSomeSetting;
  KConfigSkeleton::ItemBool  *innerItemSomeSetting;
  innerItemSomeSetting = new KConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "someSetting" ), mSomeSetting, true );
  itemSomeSetting = new KConfigCompilerSignallingItem(innerItemSomeSetting, this, notifyFunction, signalSomeSettingChanged);
  addItem( itemSomeSetting, QStringLiteral( "someSetting" ) );
}

bool KirigamiSettingsConfig::defaultSomeSettingValue_helper()
{

  return true;
}

KirigamiSettingsConfig::~KirigamiSettingsConfig()
{
  if (s_globalKirigamiSettingsConfig.exists() && !s_globalKirigamiSettingsConfig.isDestroyed()) {
    s_globalKirigamiSettingsConfig()->q = nullptr;
  }
}


void KirigamiSettingsConfig::itemChanged(quint64 signalFlag) {

  switch (signalFlag) {
  case signalSomeSettingChanged:
    Q_EMIT someSettingChanged();
    break;
  }
}

#include "kirigamisettingsconfig.moc"

